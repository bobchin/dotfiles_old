# --------------------------------------------------
# Override
# --------------------------------------------------
snippet function
abbr function () {}
    ${1:public }function ${2:#:FunctionName}(${3:#:Args})
    {
        ${4:TARGET}
    }

snippet php
    <?php
    ${1:TARGET}
    ?>

snippet pecho
    <?php echo ${1:#:$var}; ?>

snippet echoh
    <?php echo htmlentities(${1:#:$var}, ENT_QUOTES, 'utf-8') ?>

snippet pfore
    <?php foreach (${1:#:variable} as ${2:#:key}${3: =>}): ?>
    ${0:TARGET}
    <?php endforeach; ?>

snippet pife
    <?php if (${1:#:condition}): ?>
    ${2:TARGET}
    <?php else: ?>
    ${0}
    <?php endif; ?>

snippet pif
    <?php if (${1:#:condition}): ?>
        ${0:TARGET}
    <?php endif; ?>

snippet pelse
    <?php else: ?>

snippet this
    $this->{0}

snippet ethis
    <?php echo $this->{0}; ?>

snippet docc
    /**
     * ${3:#:undocumented class variable}
     *
     * @var ${4:#:string}
     **/
    ${1:#:public} ${2};${0}

snippet docd
    /**
     * ${3:#:undocumented constant}
     **/
    define('${1}', ${2});${0}

snippet docs
    /**
     * ${4:#:undocumented function}
     *
     * @return ${5:void}
     **/
    ${1}function ${2:#:funcname}(${3:#:args});${0}

snippet docf
    /**
     * ${4:#:undocumented function}
     *
     * @return ${5:void}
     **/
    ${1:public} function ${2:#:funcname}(${3:#:args})
    {
        ${0:TARGET}
    }

snippet doch
    /**
     * ${1}
     *
     * @author ${2}
     * @version ${3}
     * @copyright ${4}
     * @package ${5:default}
     **/
    
    /**
     * Define DocBlock
     **/

snippet doci
    /**
     * ${2:#:undocumented class}
     *
     * @package ${3:default}
     * @author ${4}
     **/
    interface ${1}
    {
        ${0:TARGET}
    } // END interface $1

snippet c
    /**
     * $0
     */

snippet class
    /**
     * ${5}
     */
    class ${1:#:ClassName}${2:#: extends}
    {
        function ${3:__construct}(${4:#:argument})
        {
            ${0:# code...}
        }
    }

snippet def
    ${1:#:$var = }defined(${2});

snippet do
    do {
        ${0:TARGET}
    } while (${1:#:condition});

snippet if?
    ${1:#:retVal} = (${2:#:condition}) ? ${3:#:a} : ${4:#:b};

snippet ifelse
    if (${1:#:condition}) {
        ${2:TARGET}
    } else {
        ${3:#:code...}
    }
    ${0}

snippet if
    if (${1:#:condition}) {
        ${0:TARGET}
    }

snippet echo
    echo ${1:#:string};

snippet else
    } else {
        ${0:TARGET}
    }

snippet elseif
    } elseif (${1:#:condition}) {
        ${0:TARGET}
    }

snippet for
    for (${1:$i}=${2:0}; $1 < ${3}; $1++) { 
        ${0:TARGET}
    }

snippet fore
    foreach (${1:#:variable} as ${2:#:key}${3: =>} ${4:#:value}) {
        ${0:TARGET}
    }

snippet con
    function __construct(${1})
    {
        ${0:TARGET}
    }

snippet here
    <<<${1:HTML}
    ${2:TARGET:#:content here}
    $1;

snippet inc
    include ${1:#:file};

snippet inco
    include_once ${1:#:file};${0}

snippet array
    ${1:#:arrayName} = array('${2}' => ${3});

snippet req
    require ${1:#:file};${0}

snippet reqo
    require_once ${1:#:file};${0}

snippet ret
    return${1};${0}

snippet retf
    return false;

snippet rett
    return true;

snippet case
    case ${1:#:variable}:
        ${0:#:code...}
        break;

snippet switch
abbr sw
    switch (${1:#:variable}) {
        case ${2:#:value}:
            ${3:#:code...}
            break;
        default:
            ${4:#:code...}
            break;
    }

snippet throw
    throw new ${1}Exception("${2:#:Error Processing Request}"}${3});
    ${0}

snippet while
abbr wh
    while (${1}) {
        ${0:TARGET}
    }

snippet gloabals
    $GLOBALS['${1:#:variable}']{0}

snippet cookie
    $_COOKIE['${1:#:variable}']{0}

snippet env
    $_ENV['${1:#:variable}']{0}

snippet files
    $_FILES['${1:#:variable}']{0}

snippet get
    $_GET['${1:#:variable}']{0}

snippet post
    $_POST['${1:#:variable}']{0}

snippet request
    $_REQUEST['${1:#:variable}']{0}

snippet server
    $_SERVER['${1:#:variable}']{0}

snippet session
    $_SESSION['${1:#:variable}']{0}



# --------------------------------------------------
# Controller
# --------------------------------------------------
snippet controller
    class ${1}Controller extends AppController
    {
        public $name = '$1';
        public $uses = false;
        // public $helpers = array();
        // public $components = array();

        public function index()
        {
        }
        ${0}
    }

snippet set
    $this->set('${1:#:name}', '${2:#:value}');${0}

snippet setcomapct
    $this->set(compact('${1:#:varname}'));${0}

snippet redirect
    $this->redirect(array('controller' => '${1:#:controller}', 'action' => '${2:#:action}'));${0}

snippet req_postdata
    $this->request->data['${1:#:key}'];${0}

snippet req_querystring
    $this->request->query['${1:key}'];${0}

snippet req_is
    $this->request->is('${1:#:post}')${0}

# --------------------------------------------------
# Model
# --------------------------------------------------
snippet model
    class ${1:singular_name}Model extends AppModel
    {
        public $name = '$1';
        public $useTable = '${2:$1}';
        public $primaryKey = '${3:id}';
        // public $validate = array();

        ${0}
    }

snippet find
    $this->find('${2:all|first|count|list|threaded|neighbours}', array(
        'conditions' => array(),
        'fields' => array(),
        'limit' => 20,
        'order' => array('Model.col' => 'desc|asc'),
    ));
    ${0}

snippet validate
    '${1:#:field}' => array(
        'rule' => '${2:#:rule}',
        'message' => '${3:#:error_msg}',
        // 'required' => true,
        // 'allowEmpty' => true,
        // 'last' => false,
        // 'on' => 'update',
    ),
    ${0}

snippet save
    $this->save(${2:array_data}${0});

# --------------------------------------------------
# Html Helper
# --------------------------------------------------
snippet doctype
    <?php echo $this->Html->doctype('${1:#:html5|html4-strict|html4-trans|html4-frame|xhtml-strict|xhtml-trans|xhtml-frame|xhtml11}'); ?>${0}

snippet meta
    <?php echo $this->html->meta('${1:#:keywords|descreption}', '${2:#:content}'); ?>${0}

snippet charset
    <?php echo $this->Html->charset(${1:'utf-8'}); ?>${0}

snippet css
    <?php echo $this->Html->css('${1:#:css_file}'); ?>${0}

snippet script
    <?php echo $this->Html->script('${1:#:js_file}'); ?>${0}

snippet scriptStart
    <?php echo $this->Html->scriptStart(array('inline' => ${1:false}, 'safe' => ${2:true})); ?>
    jQuery(function($){
        ${0}
    });
    <?php echo $this->Html->scriptEnd(); ?>

snippet link
    <?php echo $this->Html->link('${1:#:title}', array('controller' => '${2:#:controller}', 'action' => '${3:#:action}'); ?>${0}

snippet link_confirm
    <?php echo $this->Html->link('${1:title}', array('controller' => '${2:controller}', 'action' => '${3:action}'), array('escape' => ${4:true}), ${5:comfirm_msg}); ?>${0}

snippet link_url
    <?php echo $this->Html->link('${1:title}', '${2:url}', array('escape' => ${3:true}))); ?>${0}

snippet link_image
    <?php echo $this->Html->link($this->Html->image('${1:path from /img}', array('alt' => '${2}'), array('controller' => '${3:controller}', 'action' => '${4:action}'), array('escape' => false)); ?>${0}

snippet image
    <?php echo $this->Html->image('${1:path from /img}', array('alt' => '${2}'${3:, 'width' => 20}${4:, 'height' => 20})); ?>${0}

# --------------------------------------------------
# Form Helper
# --------------------------------------------------
snippet form_create
    <?php echo $this->Form->create(${1:'model_name'}); ?>${0}

snippet form_create_detail
    <?php echo $this->Form->create(${1:'model_name'}, array('url' => array('controller' => '${2:controller}', 'action' => '${3:action}'))); ?>${0}

snippet form_create_file
    <?php echo $this->Form->create(${1:'model_name'}, array('type' => 'file', 'url' => array('controller' => '${2:controller}', 'action' => '${3:action}'))); ?>${0}

snippet form
    <?php echo $this->Form->${0}; ?>${0}

snippet form_text
    <?php echo $this->Form->text('${1:field}', array('size' => ${2:size}, 'default' => '${3}')); ?>${0}

snippet form_password
    <?php echo $this->Form->password('${1:field}', array('size' => ${2:size}, 'default' => '${3}')); ?>${0}

snippet form_textarea
    <?php echo $this->Form->textarea('${1:field}', array('rows' => ${2:rows}, 'cols' => '${3:cols}')); ?>${0}

snippet form_hidden
    <?php echo $this->Form->hidden('${1:field}', array('value' => ${2:value})); ?>${0}

snippet form_checkbox
    <?php echo $this->Form->checkbox('${1:field}', array('hiddenField' => ${2:true}, 'default' => '${3}')); ?>${0}

snippet form_radio
    <?php echo $this->Form->radio('${1:field}', ${2:value-name pair}, array('legend' => ${3:false}, 'default' => '${4}'${5:, 'disabled' => true}${6:, 'separator' => '<br/>'})); ?>${0}

snippet form_select
    <?php echo $this->Form->select('${1:field}', ${2:value-name pair}, array('legend' => ${3:false}, 'default' => '${4}'${5:, 'disabled' => true}${6:, 'separator' => '<br/>'}${7:, 'multiple' => true})); ?>${0}

snippet form_file
    <?php echo $this->Form->file('${1:field}', array(${2:options})); ?>${0}

snippet form_submit
    <?php echo $this->Form->submit('${1:value|image}', array(${2:options})); ?>${0}

snippet form_button
    <?php echo $this->Form->button('${1:value|image}', array('type' => '${2:button|reset|submit}')); ?>${0}

snippet form_post_button
    <?php echo $this->Form->postButton('${1:value|image}', array('controller' => '${2:controller}', 'action' => '${3:action}')${4:, array()}); ?>${0}

snippet form_post_link
    <?php echo $this->Form->postLink('${1:value|image}', array('controller' => '${2:controller}', 'action' => '${3:action}')${4:, array()}); ?>${0}

snippet form_error
    <?php echo $this->Form->error('${1:field}', ${2:msg|false}, array('escape' => ${3:true}, 'wrap' => ${4:false}));?>${0}

snippet form_isFieldError
    <?php if ($this->Form->isFieldError('${1:field}'): ?>
    <?php echo $this->Form->error('${2:field}', ${3:msg|false}, array('escape' => ${4:true}, 'wrap' => ${5:false}));?>${0}
    <?php endif;?>

# --------------------------------------------------
# Pagination
# --------------------------------------------------
snippet pagi_setting
    $paginate = array(
        'fields' => array(),
        'conditions' => array(),
        // 'order' => array('User.created' => 'asc'),
        'limit' => 20,
        'page' => 1,
    );

snippet pagi_sort
    <?php echo $this->Paginator->sort('${1:#:field}', '${2:#:title}'); ?>${0}

snippet pagi_numbers
    <?php echo $this->Paginator->numbers(array(
        'first' => '<<',
        'last' => '>>',
        'class' => '',
        'currentClass'=> 'current',
        'tag' => 'span',
        'separator' => '&nbsp;|&nbsp;',
        'modulus' => 8,
        'elipsis' => '...',
    )); ?>${0}

snippet pagi_counter
    <?php echo $this->Paginator->counter('Page {:page} of {:pages}, showing {:current} records out of {:count} total, starting on record {:start}, ending on {:end}'); ?>${0}

# --------------------------------------------------
# Session
# --------------------------------------------------
snippet setFlash
    $this->Session->setFlash('${1:msg}');${0}

# --------------------------------------------------
# App
# --------------------------------------------------
snippet uses
    App::uses('${1:#:class}', '${2:#:package}');${0}

snippet uses_controller
    App::uses('${1:#:controller_class}', 'Controller');${0}

snippet uses_component
    App::uses('${1:#:component_class}', 'Controller/Component');${0}

snippet uses_model
    App::uses('${1:#:model_class}', 'Model');${0}

snippet uses_behavior
    App::uses('${1:#:behavior_class}', 'Model/Behavior');${0}

snippet uses_view
    App::uses('${1:#:view_class}', 'View');${0}

snippet uses_helper
    App::uses('${1:#:helper_class}', 'View/Helper');${0}

snippet uses_lib
    App::uses('${1:#:library_class}', 'Library');${0}

snippet uses_utility
    App::uses('${1:#:utility_class}', 'Utiliry');${0}

# --------------------------------------------------
# Configure
# --------------------------------------------------
snippet confread
    Configure::read('${1:#:key}');${0}

snippet confwrite
    Configure::write('${1:#:key}', '${2:#:value}');${0}

# --------------------------------------------------
# View
# --------------------------------------------------
snippet pecho
    <?php echo ${1:#:msg}; ?>${0}

snippet pechoh
    <?php echo h(${1:#:msg}); ?>${0}

# --------------------------------------------------
# Misc
# --------------------------------------------------
snippet pr
    pr(${1:msg});${0}

snippet log
    CakeLog::write('${1:#:debug|info|notice|warning|error|critical|alert|emergency}', ${2:#:msg});${0}

snippet log_debug
    CakeLog::debug(${1:#:msg});${0}

snippet log_error
    CakeLog::error(${1:#:msg});${0}

snippet log_notice
    CakeLog::notice(${1:#:msg});${0}

snippet log_warning
    CakeLog::warning(${1:#:msg});${0}

snippet debug
    debug(${1:#:$var});${0}

snippet var_dump
    var_dump(${1:#:$var});${0}




